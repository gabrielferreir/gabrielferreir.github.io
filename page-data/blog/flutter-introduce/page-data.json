{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/flutter-introduce","webpackCompilationHash":"4badbd458e212568bf0b","result":{"data":{"markdownRemark":{"html":"<h2>O quê é Flutter?</h2>\n<p>Flutter é um SDK da Google para desenvolvimento mobile multiplataforma(Android, IOS) apartir de uma\nunica base de código, ele foi apresentado em 2015 em um evento da linguagem Dart e tinha\ncomo objetivo renderizar de forma consistente a 120 fps. O lançamento inicial aconteceu em maio de 2017\ne o lançamento da versão estavel(1.0.0) aconteceu no dia 4 de dezembro de 2018.</p>\n<h2>Por que Flutter?</h2>\n<ul>\n<li>Produtividade (Base unica de codigo, Hot reload, Widgets prontos)</li>\n<li>Crie experiencias de usuarios fodas e altamente personalizadas</li>\n<li>Fluidez</li>\n</ul>\n<p><img src=\"/flutter-introduce/galery-animation.gif\" alt=\"Galery\">\n<img src=\"/flutter-introduce/galery-posse.gif\" alt=\"Galery\"></p>\n<h2>Dart</h2>\n<p>Cogitaram o uso de muitas linguagem no inicio do desenvolvimento do Flutter, entre elas a linguagem que\nse destacou foi a Dart. </p>\n<p>Dart é uma linguagem orientada a objetos, tipada e foi desenvolvida pelo Google, possui uma sintaxe que parecida\ncom Java, Javascript. Então se você tem conhecimento em alguma dessas linguagens orientação a objetos Dart não sera\num problema.</p>\n<pre><code class=\"language-dart\">void main() {\n  for (int i = 0; i &#x3C; 5; i++) {\n    print('hello ${i + 1}');\n  }\n}\n</code></pre>\n<p>O Dart ainda pode compilar para codigo nativo em AOT (Ahead Of Time) e em JIT (Just In Time).</p>\n<p>O AOT permite que seu app seja compilado no código nativo de cada plataforma antes da execução fazendo com\nque o app inicie rapidamente. E o JIT torna HotReload possível, fazendo com que sua aplicação seja recompilada\nem tempo de execução e que mantenha o estado de desenvolvimento, e como resultado isso faz com que suas variáveis não percam o valor\nenquanto seu app é recarregado na fase de desenvolvimento.</p>\n<p><img src=\"/flutter-introduce/hotreload.gif\" alt=\"HotReload\"></p>\n<h2>Flutter vs WebViews(Ionic/Cordova)</h2>\n<p><img src=\"/flutter-introduce/webview.png\" alt=\"WebViews\"></p>\n<p>As WebViews renderizam paginas web e executam o seu codigo HTML/CSS/Javascript e como o Javascript não se\ncomunica diretamente com o codigo nativo eles passam por uma ponte(Bridge) e é essa ponte que ira se comunicar com o\ndominio nativo quando for necessario acessar algum dos serviços internos como por exemplo a Localização,\nBluetooth e etc. </p>\n<h2>Ponte(Bridge)</h2>\n<p><img src=\"/flutter-introduce/bridge.png\" alt=\"Bridge\"></p>\n<p>A ponte trabalha de maneira semelhante a de um WebSocket que envia e recebe informações e esse fluxo acontece de ambos os\nlados, enviando dados do seu codigo Javascript e recebendo dados da sua plataforma nativa.  </p>\n<h2>Flutter vs React Native?</h2>\n<p><img src=\"/flutter-introduce/reactive-views.png\" alt=\"reactive-views\"></p>\n<p>Com o React-native não é diferente, ele não se comunica diretamente com o dominio nativo.\nMesmo que a maior parte do codigo do app seja escrito em Javascript a interface do usuario\né 100% nativa.</p>\n<p>O React Native trabalha em dois domínios diferentes o domínio nativo e o domínio do JS.\nE ambos os domínios são extremamente rápidos. O problema acontece quando esses lados precisam se\ncomunicar. Quando acontece uma alteração na arvore de Widgets do seu App ele envia essas alterações\npara a ponte que as envia para a plataforma nativa e ela acessa os seus Widgets nativos e recria a sua interface,\nem casos em que são realizadas animações/transições entre esses reinos podem se comunicar ate 60 vezes\npor segundos o que dificulta que o app rode a 60 fps e deixe seu app com uma fluidez legal.</p>\n<h2>Como o Flutter funciona?</h2>\n<p><img src=\"/flutter-introduce/flutter.png\" alt=\"Flutter\"></p>\n<p>O Flutter utiliza uma abordagem diferente, ele abandona a Brigde e utiliza uma linguagem\ncompilada chamada Dart que compila em AOT (ahead of time) código nativo para múltiplas\nplataformas.</p>\n<p>Ele trás para si a responsabilidade de analisar e renderizar os Widgets e envia para ponte somente\no que a GPU precisa para renderizar o seus Widgets. </p>\n<p>Comparado a outros frameworks o Flutter funciona de maneira totalmente diferente dos frameworks tradicionais\npara criação de aplicativos, ele funciona de maneira semelhante a de um mecanismo de jogo.</p>\n<p>O Flutter utiliza um mecanismo chamado Skia que recebe seus Widgets e envia as informações diretamente para o\ncanvas da plataforma e a plataforma retorna os eventos conforme necessário.</p>\n<p><img src=\"/flutter-introduce/skia.png\" alt=\"Skia\"> </p>\n<h2>Fluter não utiliza os widgets OEM</h2>\n<p><img src=\"/flutter-introduce/evolution.png\" alt=\"Evolution\"></p>\n<p>Os widgets OEM são os widgets nativos de cada interface.\nPorem isso não significa que você terá que criar seus Widgets do zero, Os Widgets de\nambas as plataformas estarão disponíveis para uso somente na versão mais recente do Material Designer.</p>\n<h5>Isso significa que seus usuario mais atentos podem ter surpresas...</h5>\n<p><img src=\"/flutter-introduce/oem.png\" alt=\"OEM\"></p>\n<h2>Biografia</h2>\n<ul>\n<li><a href=\"https://flutter.io/docs/resources/technical-overview\">https://flutter.io/docs/resources/technical-overview</a></li>\n<li><a href=\"https://hackernoon.com/whats-revolutionary-about-flutter-946915b09514\">https://hackernoon.com/whats-revolutionary-about-flutter-946915b09514</a></li>\n<li><a href=\"https://medium.com/47billion/flutter-how-does-it-works-6e4c73842e67\">https://medium.com/47billion/flutter-how-does-it-works-6e4c73842e67</a></li>\n<li><a href=\"https://medium.com/the-andela-way/why-you-should-give-flutter-some-of-your-attention-22dd7e5cae42\">https://medium.com/the-andela-way/why-you-should-give-flutter-some-of-your-attention-22dd7e5cae42</a></li>\n<li><a href=\"https://hackernoon.com/flutter-5-reasons-why-you-may-love-it-55021fdbf1aa\">https://hackernoon.com/flutter-5-reasons-why-you-may-love-it-55021fdbf1aa</a></li>\n<li><a href=\"https://medium.com/@talkol/performance-limitations-of-react-native-and-how-to-overcome-them-947630d7f440\">https://medium.com/@talkol/performance-limitations-of-react-native-and-how-to-overcome-them-947630d7f440</a></li>\n<li><a href=\"https://hackernoon.com/why-flutter-uses-dart-dd635a054ebf\">https://hackernoon.com/why-flutter-uses-dart-dd635a054ebf</a></li>\n<li><a href=\"https://medium.com/flutter-io/why-flutter-doesnt-use-oem-widgets-94746e812510\">https://medium.com/flutter-io/why-flutter-doesnt-use-oem-widgets-94746e812510</a></li>\n<li><a href=\"https://medium.com/flutter-community/flutter-platformview-how-to-create-flutter-widgets-from-native-views-366e378115b6\">https://medium.com/flutter-community/flutter-platformview-how-to-create-flutter-widgets-from-native-views-366e378115b6</a></li>\n<li><a href=\"https://buildflutter.com/how-flutter-works/\">https://buildflutter.com/how-flutter-works/</a></li>\n</ul>","frontmatter":{"date":"February 15, 2019","path":"/blog/flutter-introduce","title":"Flutter Introduce"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}