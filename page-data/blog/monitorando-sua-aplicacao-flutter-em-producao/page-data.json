{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/monitorando-sua-aplicacao-flutter-em-producao","result":{"data":{"markdownRemark":{"html":"<p>Após subir uma aplicação em produção, é bem provável que seus usuários encontrem alguns erros durante o uso de sua\naplicação.</p>\n<p>Sabendo disso, é importante que você desenvolva formas de capturar erros e informações relevantes que levarão a\naplicação a falhar.</p>\n<p>A ferramenta mais conhecida para captura de erros em aplicações mobile é o Crashlytics.</p>\n<p>Vamos começar.</p>\n<ul>\n<li><a href=\"#criando-projeto-no-firebase\">Criando projeto no Firebase</a></li>\n<li><a href=\"#instalacao-no-android\">Instação no Android</a></li>\n<li><a href=\"#instalacao-no-ios\">Instação no IOS</a></li>\n<li><a href=\"#instalando-pacotes\">Instalando pacotes</a></li>\n<li><a href=\"#configurando-crashlytics-no-android\">Configurando Crashlytics no Android</a></li>\n<li><a href=\"#configurando-crashlytics-no-ios\">Configurando Crashlytics no IOS</a></li>\n<li><a href=\"#iniciando-o-crashlytics\">Iniciando Crashlytics</a></li>\n<li><a href=\"#simulando-um-crash\">Simulando um crash</a></li>\n<li><a href=\"#enviando-um-erro\">Enviando um erro</a></li>\n<li><a href=\"#adicionando-uma-chave-personalizada\">Adicionando uma chave personalizada</a></li>\n<li><a href=\"#adicionando-logs\">Adicionando logs</a></li>\n<li><a href=\"#vinculando-usuario\">Vinculando usuário</a></li>\n</ul>\n<p><a name=\"criando-projeto-no-firebase\"></a></p>\n<h2>Criando projeto no Firebase</h2>\n<p>O primeiro passo para a instalação do Crashlytics é a criação de um projeto no Firebase.</p>\n<p>Acesse o <a href=\"https://console.firebase.google.com/u/0/project/_/overview\">Firebase Console</a> e clique em \"Adicionar projeto\".</p>\n<p><img src=\"/monitorando-sua-aplicacao-flutter-em-producao/01.png\" alt=\"Galery\"></p>\n<p>Dê um nome para o seu projeto.</p>\n<p><img src=\"/monitorando-sua-aplicacao-flutter-em-producao/02.png\" alt=\"Galery\"></p>\n<p>Desmarque a opção \"Ativar o Google Analytics neste projeto\".</p>\n<p><img src=\"/monitorando-sua-aplicacao-flutter-em-producao/03.png\" alt=\"Galery\"></p>\n<p><a name=\"instalacao-no-android\"></a></p>\n<h2>Instalação no Android</h2>\n<p>Vamos iniciar com a configuração no Android.</p>\n<p><img src=\"/monitorando-sua-aplicacao-flutter-em-producao/04.png\" alt=\"Galery\"></p>\n<p>Durante a criação o nome do pacote deve ser exatamente igual ao que está no arquivo *\nandroid/app/src/main/AndroidManifest.xml*.</p>\n<p><img src=\"/monitorando-sua-aplicacao-flutter-em-producao/05.png\" alt=\"Galery\"></p>\n<p>Faça o download do <strong>google-services.json</strong> e cole na pasta <strong>android/app</strong>.</p>\n<p><img src=\"/monitorando-sua-aplicacao-flutter-em-producao/06.png\" alt=\"Galery\"></p>\n<p>Adicione o plugin do google-service no arquivo <strong>android/build.gradle</strong>.</p>\n<pre><code>buildscript {\n    ...\n    repositories {\n        ...\n    }\n\n    dependencies {\n        ...\n        classpath 'com.google.gms: google-services: 4.3.3'\n    }\n}\n</code></pre>\n<p>Execute o plugin do google-service adicionando  <strong>apply plugin: 'com.android.application'</strong>\nno arquivo <strong>/android/app/build.gradle</strong>.</p>\n<pre><code>...\napply plugin: 'com.android.application'\napply plugin: 'com.google.gms.google-services'\n...\n</code></pre>\n<p>No arquivo <strong>/android/app/build.gradle</strong> habilite o Multidex e o adicione nas dependecias.</p>\n<pre><code>android {\n    ...\n    defaultConfig {\n        applicationId \"com.example.crashlytics_demo\"\n        minSdkVersion 16\n        targetSdkVersion 30\n        versionCode flutterVersionCode.toInteger()\n        versionName flutterVersionName\n        multiDexEnabled true\n    }\n    ...\n}\n...\ndependencies {\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n    implementação 'com.android.support:multidex:1.0.3'\n}\n</code></pre>\n<p>Habilite o <strong>android:usesCleartextTraffic=\"true\"</strong> para que você possa realizar os testes usando um emulador.</p>\n<pre><code>&#x3C;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.crashlytics_demo\">\n\n    &#x3C;application\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"crashlytics_demo\"\n        android:usesCleartextTraffic=\"true\">\n</code></pre>\n<p><a name=\"instalacao-no-ios\"></a></p>\n<h2>Instalação no IOS</h2>\n<p>Agora vamos configurar o Firebase para IOS.</p>\n<p>Selecione a opção \"Adicionar app\", após isso selecione \"IOS\".</p>\n<p><img src=\"/monitorando-sua-aplicacao-flutter-em-producao/07.png\" alt=\"Galery\">\n<img src=\"/monitorando-sua-aplicacao-flutter-em-producao/08.png\" alt=\"Galery\"></p>\n<p>Da mesma forma que fizemos no Android, devemos utilizar o nome do pacote igual ao que está no \"Bundle identifier\" do\nIOS.</p>\n<p><img src=\"/monitorando-sua-aplicacao-flutter-em-producao/09.png\" alt=\"Galery\"></p>\n<p>Prossiga com a instalação e faça o download do arquivo \"GoogleService-Info.plist\".</p>\n<p>Para adicionar esse arquivo em um projeto IOS você deve usar o Xcode.</p>\n<p>Com o projeto aberto clique com o botão direito em \"Runner\" e selecione a opção \"Add Files to Runner\".</p>\n<p><img src=\"/monitorando-sua-aplicacao-flutter-em-producao/10.png\" alt=\"Galery\"></p>\n<p>Encontre e selecione o arquivo \"GoogleService-Info.plist\" e verifique se\n\"Copy items if needed\" está selecionado.</p>\n<p><img src=\"/monitorando-sua-aplicacao-flutter-em-producao/11.png\" alt=\"Galery\"></p>\n<p>Você ainda precisa ativar o Firebase para funcionar quando você estiver utilizando um emulador.</p>\n<p>Para isso abra o arquivo \"Info.plist\" clicando com o botão direito em cima dele e selecionando a opção \"Open as\" > \"\nSource Code\".</p>\n<p><img src=\"/monitorando-sua-aplicacao-flutter-em-producao/12.png\" alt=\"Galery\"></p>\n<p>E adicione essa chave:</p>\n<pre><code>...\n    &#x3C;key>NSAppTransportSecurity&#x3C;/key>\n    &#x3C;dict>\n        &#x3C;key>NSAllowsLocalNetworking&#x3C;/key>\n        &#x3C;true/>\n    &#x3C;/dict>\n&#x3C;/dict>\n&#x3C;/plist>\n</code></pre>\n<p><a name=\"instalando-pacotes\"></a></p>\n<h2>Instalando pacotes</h2>\n<p>Instale as dependências do Crashlytics.</p>\n<pre><code>dependencies:\n  flutter:\n    sdk: flutter\n  firebase_core: \"^1.3.0\"\n  firebase_crashlytics: \"^2.0.6\"\n</code></pre>\n<p><a name=\"configurando-crashlytics-no-android\"></a></p>\n<h2>Configurando Crashlytics no Android</h2>\n<pre><code>dependencies {\n  ...\n  classpath 'com.google.gms:google-services:4.3.5'\n  classpath 'com.google.firebase:firebase-crashlytics-gradle:2.5.1'\n}\n</code></pre>\n<pre><code>... \nandroid {\n    ...\n}\n\ndependencies {\n    ...\n}\n\napply plugin: 'com.google.gms.google-services'\napply plugin: 'com.google.firebase.crashlytics'\n</code></pre>\n<p><a name=\"configurando-crashlytics-no-ios\"></a></p>\n<h2>Configurando Crashlytics no IOS</h2>\n<p>Abra sua aplicação no Xcode. Clique em \"Runner\", selecione a opção \"Build Phases\"\nem seguida clique em \"+\" > \"New Run Script Phase\".</p>\n<p><img src=\"/monitorando-sua-aplicacao-flutter-em-producao/17.png\" alt=\"Galery\"></p>\n<p>Adicione \"${PODS_ROOT}/FirebaseCrashlytics/run\" na caixa de texto.</p>\n<p><img src=\"/monitorando-sua-aplicacao-flutter-em-producao/18.png\" alt=\"Galery\"></p>\n<p><a name=\"ativacao-do-crashlytics\"></a></p>\n<h2>Ativação do Crashlytics</h2>\n<p><img src=\"/monitorando-sua-aplicacao-flutter-em-producao/19.png\" alt=\"Galery\"></p>\n<p><a name=\"iniciando-o-crashlytics\"></a></p>\n<h2>Iniciando o Crashlytics</h2>\n<p>No seu arquivo <strong>main.dart</strong> faça a inicialização do Firebase.</p>\n<pre><code>import 'package:firebase_core/firebase_core.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  WidgetsFlutterBinding.ensureInitialized();\n  runApp(MyApp());\n}\n\nclass MyApp extends StatefulWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  _MyAppState createState() => _MyAppState();\n}\n\nclass _MyAppState extends State&#x3C;MyApp> {\n  final Future&#x3C;FirebaseApp> _initialization = Firebase.initializeApp();\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n        home: FutureBuilder(\n            future: _initialization,\n            builder: (context, snapshot) {\n              if (snapshot.hasError) return Center(child: Text('Error'));\n              if (snapshot.connectionState == ConnectionState.done) {\n                return Scaffold(\n                    appBar: AppBar(),\n                    body: Center(\n                      child: Text('Home'),\n                    ));\n              }\n              return Center(child: CircularProgressIndicator());\n            }));\n  }\n}\n</code></pre>\n<p><a name=\"simulando-um-crash\"></a></p>\n<h2>Simulando um crash</h2>\n<p>Adicione um botão e simule um evento de crash na aplicação.</p>\n<pre><code>ElevatedButton(\n    child: Text('CRASH'),\n    onPressed: () {\n      FirebaseCrashlytics.instance.crash();\n    },\n),\n</code></pre>\n<p>Rode sua aplicação e clique no botão Crash. Após isso esperamos que chegue um erro no Firebase Console.</p>\n<p><img src=\"/monitorando-sua-aplicacao-flutter-em-producao/20.png\" alt=\"Galery\"></p>\n<p><a name=\"enviando-um-erro\"></a></p>\n<h2>Enviando um erro</h2>\n<p>Você pode enviar um erro manualmente para o Crashlytics utilizando o <code>recordError</code>.</p>\n<p><strong>Parametros:</strong></p>\n<ul>\n<li>error: dynamic (Obrigatorio) -> Nesse campo você deve enviar a Exception ou a string do erro.</li>\n<li>stackTrace: StackTrace (Obrigatorio) -> A pilha de informações de onde o erro ocorreu. (O Crashlytics utiliza esse\ncampo para fazer o agrupamento dos erros).</li>\n<li>reason: String (Opcional) ->  O valor enviado nesse campo será salvo na propriedade <code>flutter_error_reason</code>. Você\npoderia visualizar essa mensagem acessando os detalhes do erro no Console do Firebase. Você pode utilizar esse campo\npara realizar filtros e encontrar todos os erros que possuem e mesma propriedade.</li>\n<li>fatal: boolean (Opcional) ->  Boolean que indicará se o erro é do tipo fatal.</li>\n</ul>\n<pre><code>...\nonPressed: () async {\n  try {\n    throw Exception('Teste');\n  } catch(error, stackTrace) {\n    await FirebaseCrashlytics.instance.recordError(\n        error,\n        stackTrace,\n        reason: 'a error test',\n        fatal: true,\n    );\n  }\n},\n...\n</code></pre>\n<p><a name=\"adicionando-uma-chave-personalizada\"></a></p>\n<h2>Adicionando uma chave personalizada</h2>\n<p>Podemos adicionar chaves personalizadas ao erro do Crashlytics, para isso usamos o método <code>setCustomKey</code>.</p>\n<pre><code>import 'package:firebase_core/firebase_core.dart';\nimport 'package:firebase_crashlytics/firebase_crashlytics.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  WidgetsFlutterBinding.ensureInitialized();\n  runApp(MyApp());\n}\n\nclass MyApp extends StatefulWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  _MyAppState createState() => _MyAppState();\n}\n\nclass _MyAppState extends State&#x3C;MyApp> {\n  final Future&#x3C;FirebaseApp> _initialization = Firebase.initializeApp();\n  String _type = 'Padrao';\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n        home: FutureBuilder(\n            future: _initialization,\n            builder: (context, snapshot) {\n              if (snapshot.hasError) return Center(child: Text('Error'));\n              if (snapshot.connectionState == ConnectionState.done) {\n                return Scaffold(\n                    appBar: AppBar(),\n                    body: Column(\n                      children: [\n                        ElevatedButton(\n                            onPressed: () {\n                              setState(() {\n                                _type = 'Digital';\n                              });\n                              FirebaseCrashlytics.instance\n                                  .setCustomKey('type', _type);\n                            },\n                            child: Text('Digital')),\n                        ElevatedButton(\n                            onPressed: () {\n                              setState(() {\n                                _type = 'Analogico';\n                              });\n                              FirebaseCrashlytics.instance\n                                  .setCustomKey('type', _type);\n                            },\n                            child: Text('Analogico')),\n                        ElevatedButton(\n                          child: Text('CRASH'),\n                          onPressed: () async {\n                            try {\n                              throw Exception('Teste');\n                            } catch (error, stackTrace) {\n                              await FirebaseCrashlytics.instance.recordError(\n                                error,\n                                stackTrace,\n                                reason: 'a error test',\n                              );\n                            }\n                          },\n                        )\n                      ],\n                    ));\n              }\n              return Center(child: CircularProgressIndicator());\n            }));\n  }\n}\n</code></pre>\n<p>Esse é o resultado no Console do Firebase:</p>\n<p><img src=\"/monitorando-sua-aplicacao-flutter-em-producao/21.png\" alt=\"Galery\"></p>\n<p><a name=\"adicionando-logs\"></a></p>\n<h2>Adicionando logs</h2>\n<p>Muitas vezes as informações que temos disponíveis no Crashlytics não são suficientes para entendermos o motivo de uma\nfalha. Com isso, podemos optar por enviar algumas mensagens de log usando o método <code>log</code>.</p>\n<pre><code>import 'package:firebase_core/firebase_core.dart';\nimport 'package:firebase_crashlytics/firebase_crashlytics.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  WidgetsFlutterBinding.ensureInitialized();\n  runApp(MyApp());\n}\n\nclass MyApp extends StatefulWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  _MyAppState createState() => _MyAppState();\n}\n\nclass _MyAppState extends State&#x3C;MyApp> {\n  final Future&#x3C;FirebaseApp> _initialization = Firebase.initializeApp();\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n        home: FutureBuilder(\n            future: _initialization,\n            builder: (context, snapshot) {\n              if (snapshot.hasError) return Center(child: Text('Error'));\n              if (snapshot.connectionState == ConnectionState.done) {\n                return Scaffold(\n                    appBar: AppBar(),\n                    body: Column(\n                      children: [\n                        ElevatedButton(\n                            onPressed: () {\n                              FirebaseCrashlytics.instance.log('Tap on \"A\"');\n                            },\n                            child: Text('A')),\n                        ElevatedButton(\n                            onPressed: () {\n                              FirebaseCrashlytics.instance.log('Tap on \"B\"');\n                            },\n                            child: Text('B')),\n                        ElevatedButton(\n                          child: Text('CRASH'),\n                          onPressed: () async {\n                            try {\n                              throw Exception('Teste');\n                            } catch (error, stackTrace) {\n                              await FirebaseCrashlytics.instance.recordError(\n                                error,\n                                stackTrace,\n                              );\n                            }\n                          },\n                        )\n                      ],\n                    ));\n              }\n              return Center(child: CircularProgressIndicator());\n            }));\n  }\n}\n</code></pre>\n<p>Resultado:</p>\n<p><img src=\"/monitorando-sua-aplicacao-flutter-em-producao/22.png\" alt=\"Galery\"></p>\n<p><a name=\"vinculando-usuario\"></a></p>\n<h2>Vinculando usuário</h2>\n<p>Podemos vincular o usuário a um evento de erro usando o <code>setUserIdentifier</code>.</p>\n<p>Exemplo:</p>\n<pre><code>import 'package:firebase_core/firebase_core.dart';\nimport 'package:firebase_crashlytics/firebase_crashlytics.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  WidgetsFlutterBinding.ensureInitialized();\n  runApp(MyApp());\n}\n\nclass MyApp extends StatefulWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  _MyAppState createState() => _MyAppState();\n}\n\nclass _MyAppState extends State&#x3C;MyApp> {\n  final Future&#x3C;FirebaseApp> _initialization = Firebase.initializeApp();\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n        home: FutureBuilder(\n            future: _initialization,\n            builder: (context, snapshot) {\n              if (snapshot.hasError) return Center(child: Text('Error'));\n              if (snapshot.connectionState == ConnectionState.done) {\n                return Scaffold(\n                    appBar: AppBar(),\n                    body: Column(\n                      children: [\n                        ElevatedButton(\n                          child: Text('CRASH'),\n                          onPressed: () async {\n                            try {\n                              throw Exception('Teste');\n                            } catch (error, stackTrace) {\n                              await FirebaseCrashlytics.instance\n                                  .setUserIdentifier('25');\n                              await FirebaseCrashlytics.instance.recordError(\n                                error,\n                                stackTrace,\n                              );\n                            }\n                          },\n                        )\n                      ],\n                    ));\n              }\n              return Center(child: CircularProgressIndicator());\n            }));\n  }\n}\n</code></pre>\n<p><a name=\"tratamento-de-erros\"></a></p>\n<h2>Tratamento de erros</h2>\n<p>Faremos o tratamento para que nossa aplicação detecte erros e faça o envio do erro para o Crashlytics automaticamente.</p>\n<p>Vamos trabalhar com a captura de dois tipos de erros:</p>\n<p><strong>FlutterError</strong>: Problemas lançados na estrutura do Flutter.</p>\n<p>Ex:. Problemas de renderização e erros síncronos.</p>\n<p><strong>ZoneError</strong>: Problemas que não conseguem ser detectados pelo Flutter, mas são detectados via\n<code>runZonedGuarded</code>.</p>\n<p>Ex:. Erros assíncronos.</p>\n<p>Abaixo está um exemplo onde reproduzimos esses dois cenários.</p>\n<pre><code>import 'dart:async';\nimport 'package:flutter/material.dart';\n\nFuture&#x3C;void> main() async {\n  runZonedGuarded(() {\n    WidgetsFlutterBinding.ensureInitialized();\n\n    FlutterError.onError = (FlutterErrorDetails errorDetails) {\n      print('FlutterError');\n    };\n\n    runApp(MyApp());\n  }, (error, stackTrace) {\n    print('ZoneError');\n  });\n}\n\nclass MyApp extends StatefulWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  _MyAppState createState() => _MyAppState();\n}\n\nclass _MyAppState extends State&#x3C;MyApp> {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n        home: Scaffold(\n            appBar: AppBar(),\n            body: Column(\n              children: [\n                ElevatedButton(\n                  child: Text('CRASH'),\n                  onPressed: () {\n                    throw Exception('Teste');\n                  },\n                ),\n                ElevatedButton(\n                  onPressed: () {\n                    Future.delayed(\n                        Duration.zero, () => throw Exception('async error'));\n                  },\n                  child: Text('CRASH ASSINCRONO'),\n                ),\n              ],\n            )));\n  }\n}\n</code></pre>\n<p>No nosso caso, enviaremos o erro capturado para o Crashlytics. Para isso vamos utilizar a função\n<code>recordFlutterError</code> quando for um erro do Flutter e <code>recordError</code> quando for um erro na\nZones.</p>\n<pre><code>...\nFuture&#x3C;void> main() async {\n  runZonedGuarded(() {\n    WidgetsFlutterBinding.ensureInitialized();\n\n    FlutterError.onError = FirebaseCrashlytics.instance.recordFlutterError;\n\n    runApp(MyApp());\n  }, FirebaseCrashlytics.instance.recordError);\n}\n...\n</code></pre>\n<p>Veja o exemplo completo em: <a href=\"https://github.com/gabrielferreir/demo_crashlytis\">https://github.com/gabrielferreir/demo_crashlytis</a></p>\n<p>Qualquer dúvida ou sugestão, estou à disposição! Valeeeeu.</p>","frontmatter":{"date":"05/07/2021","path":"/blog/monitorando-sua-aplicacao-flutter-em-producao","title":"Monitorando sua aplicação Flutter em produção"},"excerpt":"Após subir uma aplicação em produção, é bem provável que seus usuários encontrem alguns erros durante o uso de sua\naplicação. Sabendo disso…"}},"pageContext":{}},"staticQueryHashes":["63159454"]}